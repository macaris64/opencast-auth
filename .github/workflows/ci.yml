name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff .

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only --diff .

      - name: Run Flake8 (Linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: opencast_auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest-cov

      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "DB_NAME=opencast_auth_test" >> $GITHUB_ENV
          echo "DB_USER=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=postgres" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=opencast_auth.settings" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          python manage.py migrate

      - name: Run tests with coverage
        run: |
          python -m pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=90

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (Security Linting)
        run: |
          bandit -r . -x tests/ -f json -o bandit-report.json || true
          bandit -r . -x tests/ --severity-level medium

      - name: Run Safety (Dependency Security Check)
        run: |
          safety check --json --output safety-report.json || true
          safety check

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test, security]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Django deployment settings
        run: |
          python manage.py check --deploy --settings=opencast_auth.settings

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput --settings=opencast_auth.settings
        env:
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: False
          DB_NAME: sqlite3
          DB_USER: test
          DB_PASSWORD: test
          DB_HOST: localhost
          DB_PORT: 5432

  cli-test:
    name: CLI Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test CLI commands
        run: |
          python -m cli.opencast_cli --help
          python -m cli.opencast_cli configure --help
          python -m cli.opencast_cli login --help
        env:
          DJANGO_SETTINGS_MODULE: opencast_auth.settings
          SECRET_KEY: test-secret-key-for-ci
